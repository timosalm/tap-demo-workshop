#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")
---
apiVersion: learningcenter.tanzu.vmware.com/v1beta1
kind: Workshop
metadata:
  name: tap-demo
spec:
  title: VMware Tanzu Application Platform Demo
  description: An introduction to the VMware Tanzu Application Platform
  vendor: tanzu.vmware.com
  difficulty: beginner
  duration: 90m
  url: https://github.com/tanzu-end-to-end/tap-workshop
  content:
    image: #@ "{}/tap-workshop/tap-demo-workshop:latest".format(data.values.container_registry.hostname)
    files: #@ "github.com/{}/tap-demo-workshop?ref={}".format(data.values.workshop_git.username,data.values.workshop_git.branch)
  session:
    env:
      - name: CONTAINER_REGISTRY_HOSTNAME
        value: #@ data.values.container_registry.hostname
      - name: CONTAINER_REGISTRY_USERNAME
        value: #@ data.values.container_registry.username
      - name: CONTAINER_REGISTRY_PASSWORD
        value: #@ data.values.container_registry.password
      - name: GIT_USER
        value: #@ data.values.workshop_session_git.username
      - name: GIT_PASSWORD
        value: #@ data.values.workshop_session_git.password
      - name: GIT_REPO
        value: #@ "https://github.com/{}/$(session_namespace).git".format(data.values.workshop_session_git.username) 
      - name: TAP_INGRESS
        value: #@ data.values.ingress.domain
      - name: TANZU_NET_USERNAME
        value: #@ data.values.tanzunet.username
      - name: TANZU_NET_PASSWORD
        value: #@ data.values.tanzunet.password
    namespaces:
      budget: custom
    applications:
      terminal:
        enabled: true
        layout: split
      console:
        enabled: true
        vendor: octant
      editor:
        enabled: true
    objects:
      - apiVersion: v1
        kind: LimitRange
        metadata:
          name: resource-limits
        spec:
          limits:
            - type: PersistentVolumeClaim
              max:
                storage: 10Gi
      # Permissions for tap-sa (Supply Chain)
      - apiVersion: v1
        kind: Secret
        metadata:
          name: tanzu-net-credentials
        type: kubernetes.io/dockerconfigjson
        data:
          #@ docker_auth = base64.encode("{}:{}".format(data.values.tanzunet.username, data.values.tanzunet.password))
          #@ docker_creds = {"username": data.values.tanzunet.username, "password": data.values.tanzunet.password, "auth": docker_auth}
          .dockerconfigjson: #@ base64.encode(json.encode({"auths": {"registry.tanzu.vmware.com": docker_creds}}))
      - apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: $(session_namespace)-default
        secrets:
          - name: registry-credentials
        imagePullSecrets:
          - name: registry-credentials
          - name: tanzu-net-credentials
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: $(session_namespace)-default
        rules:
        - apiGroups: [source.toolkit.fluxcd.io]
          resources: [gitrepositories]
          verbs: ['*']
        - apiGroups: [source.apps.tanzu.vmware.com]
          resources: [imagerepositories]
          verbs: ['*']
        - apiGroups: [carto.run]
          resources: [deliverables, runnables]
          verbs: ['*']
        - apiGroups: [kpack.io]
          resources: [images]
          verbs: ['*']
        - apiGroups: [conventions.apps.tanzu.vmware.com]
          resources: [podintents]
          verbs: ['*']
        - apiGroups: [""]
          resources: ['configmaps']
          verbs: ['*']
        - apiGroups: [""]
          resources: ['pods']
          verbs: ['list']
        - apiGroups: [tekton.dev]
          resources: [taskruns, pipelineruns]
          verbs: ['*']
        - apiGroups: [tekton.dev]
          resources: [pipelines]
          verbs: ['list']
        - apiGroups: [kappctrl.k14s.io]
          resources: [apps]
          verbs: ['*']
        - apiGroups: [serving.knative.dev]
          resources: ['services']
          verbs: ['*']
        - apiGroups: [servicebinding.io]
          resources: ['servicebindings']
          verbs: ['*']
        - apiGroups: [services.apps.tanzu.vmware.com]
          resources: ['resourceclaims']
          verbs: ['*']
        - apiGroups: [scanning.apps.tanzu.vmware.com]
          resources: ['imagescans', 'sourcescans']
          verbs: ['*']
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-default
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: $(session_namespace)-default
        subjects:
          - kind: ServiceAccount
            name: $(session_namespace)-default
            namespace: $(session_namespace)
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: $(session_namespace)-cluster-supplychain-reader
        rules:
        - apiGroups: [carto.run]
          resources: ["clusterconfigtemplates", "clusterdeliveries", "clusterdeploymenttemplates","clusterimagetemplates", "clusterruntemplates", "clustersourcetemplates", "clustersupplychains", "clustertemplates"]
          verbs: ["get", "watch", "list"]
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: $(session_namespace)-cluster-supplychain
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: $(session_namespace)-cluster-supplychain-reader
        subjects:
          - kind: Group
            name: system:serviceaccounts:$(workshop_namespace)
            apiGroup: rbac.authorization.k8s.io
      # Permissions for workshop session
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-session-crb
          namespace: $(session_namespace)
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
          - kind: ServiceAccount
            namespace: $(workshop_namespace)
            name: $(service_account)

      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-default-crb
          namespace: $(session_namespace)
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
          - kind: ServiceAccount
            namespace: $(session_namespace)
            name: default

      # Install grype
      - apiVersion: packaging.carvel.dev/v1alpha1
        kind: PackageInstall
        metadata:
          name: $(session_namespace)-grype
          namespace: tap-install
        spec:
          serviceAccountName: tap-install-sa
          packageRef:
            refName: grype.scanning.apps.tanzu.vmware.com
            versionSelection:
              constraints: ">=0.0.0"
              prereleases:
                identifiers: [beta, build]
          values:
          - secretRef:
              name: $(session_namespace)-grype-values
      - apiVersion: v1
        kind: Secret
        metadata:
          name: $(session_namespace)-grype-values
          namespace: tap-install
        stringData:
          values.yaml: |
            ---
            namespace: $(session_namespace)
            scanner:
              pullSecret: ""
            targetImagePullSecret: registry-credentials
      # Add ScanPolicy
      - apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
        kind: ScanPolicy
        metadata:
          name: scan-policy
        spec:
          regoFile: |
            package policies
            default isCompliant = false
            # Accepted Values: "Critical", "High", "Medium", "Low", "Negligible", "UnknownSeverity"
            violatingSeverities := ["Critical","High","UnknownSeverity"]
            ignoreCVEs := []
            contains(array, elem) = true {
              array[_] = elem
            } else = false { true }
            isSafe(match) {
              fails := contains(violatingSeverities, match.Ratings.Rating[_].Severity)
              not fails
            }
            isSafe(match) {
              ignore := contains(ignoreCVEs, match.Id)
              ignore
            }
            isCompliant = isSafe(input.currentVulnerability)
      # RabbitMQ Instance
      - apiVersion: rabbitmq.com/v1beta1
        kind: RabbitmqCluster
        metadata:
          name: rmq-1
          namespace: $(session_namespace)
        spec:
          resources:
            requests:
              cpu: 100m
              memory: 500Mi
            limits:
              cpu: 100m
              memory: 500Mi

      # Sensors publisher app for generating messages
      - apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: sensors-publisher
          namespace: $(session_namespace)
          labels:
            app: sensors-publisher
        spec:
          replicas: 1
          template:
            metadata:
              name: sensors-publisher
              labels:
                app: sensors-publisher
            spec:
              containers:
                - name: sensors-publisher
                  image: harbor.tap.amer.end2end.link/tap/spring-sensors-sensor
                  imagePullPolicy: IfNotPresent
                  volumeMounts:
                    - mountPath: /bindings/rmq
                      name: service-binding
                  env:
                    - name: SERVICE_BINDING_ROOT
                      value: /bindings
              restartPolicy: Always
              volumes:
                - name: service-binding
                  projected:
                    sources:
                      - secret:
                          name: rmq-1-default-user
          selector:
            matchLabels:
              app: sensors-publisher